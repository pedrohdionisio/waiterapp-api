{
	"service": {
		"service": "waiterapp",
		"serviceObject": {
			"name": "waiterapp"
		},
		"provider": {
			"name": "aws",
			"region": "us-east-1",
			"runtime": "nodejs20.x",
			"deploymentMethod": "direct",
			"architecture": "arm64",
			"environment": {
				"COGNITO_CLIENT_ID": {
					"Ref": "WaiterAppUserPoolClient"
				},
				"COGNITO_USER_POOL_ID": {
					"Ref": "WaiterAppUserPool"
				}
			},
			"iam": {
				"role": {
					"statements": [
						{
							"Effect": "Allow",
							"Action": [
								"dynamodb:PutItem",
								"dynamodb:DeleteItem",
								"dynamodb:GetItem",
								"dynamodb:UpdateItem",
								"dynamodb:Query"
							],
							"Resource": [
								{
									"Fn::Sub": "${WaiterAppTable.Arn}"
								},
								{
									"Fn::Sub": "${WaiterAppTable.Arn}/index/*"
								}
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"cognito-idp:AdminDeleteUser",
								"cognito-idp:AdminUpdateUserAttributes",
								"cognito-idp:AdminGetUser"
							],
							"Resource": [
								{
									"Fn::GetAtt": ["WaiterAppUserPool", "Arn"]
								}
							]
						}
					]
				}
			},
			"httpApi": {
				"authorizers": {
					"CognitoAuthorizer": {
						"type": "jwt",
						"identitySource": "$request.header.Authorization",
						"issuerUrl": {
							"Fn::GetAtt": ["WaiterAppUserPool", "ProviderURL"]
						},
						"audience": [
							{
								"Ref": "WaiterAppUserPoolClient"
							}
						]
					}
				}
			},
			"stage": "dev",
			"versionFunctions": true,
			"compiledCloudFormationTemplate": {
				"AWSTemplateFormatVersion": "2010-09-09",
				"Description": "The AWS CloudFormation template for this Serverless application",
				"Resources": {
					"AccountConfirmationLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-accountConfirmation"
						}
					},
					"SignInLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-signIn"
						}
					},
					"RefreshTokenLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-refreshToken"
						}
					},
					"ForgotPasswordLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-forgotPassword"
						}
					},
					"ResetPasswordLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-resetPassword"
						}
					},
					"CreateUserLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-createUser"
						}
					},
					"DeleteUserLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-deleteUser"
						}
					},
					"ListUsersLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-listUsers"
						}
					},
					"MeLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-me"
						}
					},
					"UpdateUserLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-updateUser"
						}
					},
					"CreateIngredientLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-createIngredient"
						}
					},
					"ListIngredientsLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-listIngredients"
						}
					},
					"DeleteIngredientLogGroup": {
						"Type": "AWS::Logs::LogGroup",
						"Properties": {
							"LogGroupName": "/aws/lambda/waiterapp-dev-deleteIngredient"
						}
					},
					"IamRoleLambdaExecution": {
						"Type": "AWS::IAM::Role",
						"Properties": {
							"AssumeRolePolicyDocument": {
								"Version": "2012-10-17",
								"Statement": [
									{
										"Effect": "Allow",
										"Principal": {
											"Service": ["lambda.amazonaws.com"]
										},
										"Action": ["sts:AssumeRole"]
									}
								]
							},
							"Policies": [
								{
									"PolicyName": {
										"Fn::Join": ["-", ["waiterapp", "dev", "lambda"]]
									},
									"PolicyDocument": {
										"Version": "2012-10-17",
										"Statement": [
											{
												"Effect": "Allow",
												"Action": [
													"logs:CreateLogStream",
													"logs:CreateLogGroup",
													"logs:TagResource"
												],
												"Resource": [
													{
														"Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/waiterapp-dev*:*"
													}
												]
											},
											{
												"Effect": "Allow",
												"Action": ["logs:PutLogEvents"],
												"Resource": [
													{
														"Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/waiterapp-dev*:*:*"
													}
												]
											},
											{
												"$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
											},
											{
												"$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
											}
										]
									}
								}
							],
							"Path": "/",
							"RoleName": {
								"Fn::Join": [
									"-",
									[
										"waiterapp",
										"dev",
										{
											"Ref": "AWS::Region"
										},
										"lambdaRole"
									]
								]
							}
						}
					},
					"AccountConfirmationLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-accountConfirmation.zip"
							},
							"Handler": "src/server/functions/auth/accountConfirmation.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-accountConfirmation",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["AccountConfirmationLogGroup"]
					},
					"SignInLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-signIn.zip"
							},
							"Handler": "src/server/functions/auth/signIn.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-signIn",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["SignInLogGroup"]
					},
					"RefreshTokenLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-refreshToken.zip"
							},
							"Handler": "src/server/functions/auth/refreshToken.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-refreshToken",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["RefreshTokenLogGroup"]
					},
					"ForgotPasswordLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-forgotPassword.zip"
							},
							"Handler": "src/server/functions/auth/forgotPassword.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-forgotPassword",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["ForgotPasswordLogGroup"]
					},
					"ResetPasswordLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-resetPassword.zip"
							},
							"Handler": "src/server/functions/auth/resetPassword.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-resetPassword",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["ResetPasswordLogGroup"]
					},
					"CreateUserLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-createUser.zip"
							},
							"Handler": "src/server/functions/users/createUser.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-createUser",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["CreateUserLogGroup"]
					},
					"DeleteUserLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-deleteUser.zip"
							},
							"Handler": "src/server/functions/users/deleteUser.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-deleteUser",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["DeleteUserLogGroup"]
					},
					"ListUsersLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-listUsers.zip"
							},
							"Handler": "src/server/functions/users/listUsers.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-listUsers",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["ListUsersLogGroup"]
					},
					"MeLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-me.zip"
							},
							"Handler": "src/server/functions/users/me.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-me",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["MeLogGroup"]
					},
					"UpdateUserLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-updateUser.zip"
							},
							"Handler": "src/server/functions/users/updateUser.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-updateUser",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["UpdateUserLogGroup"]
					},
					"CreateIngredientLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-createIngredient.zip"
							},
							"Handler": "src/server/functions/ingredients/createIngredient.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-createIngredient",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["CreateIngredientLogGroup"]
					},
					"ListIngredientsLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-listIngredients.zip"
							},
							"Handler": "src/server/functions/ingredients/listIngredients.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-listIngredients",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["ListIngredientsLogGroup"]
					},
					"DeleteIngredientLambdaFunction": {
						"Type": "AWS::Lambda::Function",
						"Properties": {
							"Code": {
								"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
								"S3Key": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z/waiterapp-deleteIngredient.zip"
							},
							"Handler": "src/server/functions/ingredients/deleteIngredient.handler",
							"Runtime": "nodejs20.x",
							"FunctionName": "waiterapp-dev-deleteIngredient",
							"MemorySize": 1024,
							"Timeout": 6,
							"Architectures": ["arm64"],
							"Environment": {
								"Variables": {
									"COGNITO_CLIENT_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
									},
									"COGNITO_USER_POOL_ID": {
										"$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
									},
									"NODE_OPTIONS": "--enable-source-maps"
								}
							},
							"Role": {
								"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
							}
						},
						"DependsOn": ["DeleteIngredientLogGroup"]
					},
					"SignInLambdaVersionUHmJ6mUiCXN59Dp1B2fByvlcbrJ9GM3jiYn2Fjtg": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "SignInLambdaFunction"
							},
							"CodeSha256": "vLpFNeKwq5y+7sMudw4YNtsfh22dqsI0VsslE3JfUv0="
						}
					},
					"RefreshTokenLambdaVersionzWLImJ91hIN4uC43VSFvMj2Kyk79VUC2DjeLzv9nt3I": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "RefreshTokenLambdaFunction"
							},
							"CodeSha256": "QdpuiA+98EOwmHfs6vuP76eBj1SVbikX9oQQWWB8PK8="
						}
					},
					"ForgotPasswordLambdaVersionUBCVC255HHQ87QuUUOVwt1hiR7WoXAyPhVKj6F5Q": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "ForgotPasswordLambdaFunction"
							},
							"CodeSha256": "I3vx+0AkXdl9xFFVe2P/2iTtslkpX+IIkH814Fj2aHM="
						}
					},
					"ResetPasswordLambdaVersionH46vQQRzBHhxtMLhPpAf2gd2RGRGtrKBjY1UXoMSdA": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "ResetPasswordLambdaFunction"
							},
							"CodeSha256": "VtFnIVm+rN4bisyJI+blTbhXSEZh6bMXCLehpmUnxiY="
						}
					},
					"DeleteUserLambdaVersion5sKXJokSRaJMQLCUeZw8Cb0ft04iMEn0yzbNZ3G8": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "DeleteUserLambdaFunction"
							},
							"CodeSha256": "tXja19alrHcKieulPvjuJytj796wR6vZusIzAvqIfYc="
						}
					},
					"CreateUserLambdaVersionRLkr72DxuCxdyTqqi3d60sRXq1JchhhOwnMOOaOGpm8": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "CreateUserLambdaFunction"
							},
							"CodeSha256": "mlpTX+a2Pdvus0lBX9EXygQRspMjaD3jmP+gr5tp3ps="
						}
					},
					"ListUsersLambdaVersioneGLsv4b8kDsqzEigOTQp2ujh7Z3rl5pxXAeceulE6LQ": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "ListUsersLambdaFunction"
							},
							"CodeSha256": "qTdjL/LfwHKbmzs3PhDl+71i6ziR1WzYWYwtlv33UxY="
						}
					},
					"AccountConfirmationLambdaVersionMr9cNDzTiKb3ZJIgC2LTvepFVwiwKM1uHhwgNDH4s": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "AccountConfirmationLambdaFunction"
							},
							"CodeSha256": "dDbHSeN17mRue15im7+GV/SBUIvxAU4AEzjem19Vdwc="
						}
					},
					"MeLambdaVersion8T2q34hiAyBveUTZmvDCgsZO3sbHNUU99mfC7Bqr0": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "MeLambdaFunction"
							},
							"CodeSha256": "s8b44FEU0aA8q9rIKanGkkD2wixpHvxlhqEqDSFYlAI="
						}
					},
					"UpdateUserLambdaVersionRu5jqWsyJyaTMKmAgJ2TUdFXCaaSmIvltfNjv4dJgm0": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "UpdateUserLambdaFunction"
							},
							"CodeSha256": "w1hKyBYMcz9F5MSSOycFl5owTDFKdZLO6uFYKhao7uE="
						}
					},
					"CreateIngredientLambdaVersionA8YZ4rocOl4CmuC16d7bHvmOtb9MMYH9VtdMTewVk": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "CreateIngredientLambdaFunction"
							},
							"CodeSha256": "VmOVKtlpy+CSLhInv0+IviE5G79/auWvVvTGyknm87E="
						}
					},
					"DeleteIngredientLambdaVersionGLbSNI0uXokRNZQgpmE244ORy2NVytoIYEA4swjjH0": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "DeleteIngredientLambdaFunction"
							},
							"CodeSha256": "MUJKWJyZKeTRzo2oBHJdqZa/F8vgY+LwhS6eIzMz/Ac="
						}
					},
					"ListIngredientsLambdaVersionCVkaDmYpKhLRF3sqm78T3K6AJT5kVlWN6tOouqWGw": {
						"Type": "AWS::Lambda::Version",
						"DeletionPolicy": "Retain",
						"Properties": {
							"FunctionName": {
								"Ref": "ListIngredientsLambdaFunction"
							},
							"CodeSha256": "Z95kl4CuT0Rdmxd/4RSV+Q/EdBGV/c+SdsNcABnoAi4="
						}
					},
					"HttpApi": {
						"Type": "AWS::ApiGatewayV2::Api",
						"Properties": {
							"Name": "dev-waiterapp",
							"ProtocolType": "HTTP"
						}
					},
					"HttpApiStage": {
						"Type": "AWS::ApiGatewayV2::Stage",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"StageName": "$default",
							"AutoDeploy": true,
							"DefaultRouteSettings": {
								"DetailedMetricsEnabled": false
							}
						}
					},
					"HttpApiAuthorizerCognitoAuthorizer": {
						"Type": "AWS::ApiGatewayV2::Authorizer",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"Name": "CognitoAuthorizer",
							"IdentitySource": ["$request.header.Authorization"],
							"AuthorizerType": "JWT",
							"JwtConfiguration": {
								"Audience": [
									{
										"$ref": "$[\"service\"][\"provider\"][\"httpApi\"][\"authorizers\"][\"CognitoAuthorizer\"][\"audience\"][0]"
									}
								],
								"Issuer": {
									"$ref": "$[\"service\"][\"provider\"][\"httpApi\"][\"authorizers\"][\"CognitoAuthorizer\"][\"issuerUrl\"]"
								}
							}
						}
					},
					"AccountConfirmationLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["AccountConfirmationLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationAccountConfirmation": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AccountConfirmationLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRoutePostAuthAccountDashconfirmation": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "POST /auth/account-confirmation",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationAccountConfirmation"
										}
									]
								]
							},
							"AuthorizationType": "JWT",
							"AuthorizerId": {
								"Ref": "HttpApiAuthorizerCognitoAuthorizer"
							}
						},
						"DependsOn": "HttpApiIntegrationAccountConfirmation"
					},
					"SignInLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["SignInLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationSignIn": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SignInLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRoutePostAuthSignDashin": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "POST /auth/sign-in",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationSignIn"
										}
									]
								]
							}
						},
						"DependsOn": "HttpApiIntegrationSignIn"
					},
					"RefreshTokenLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["RefreshTokenLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationRefreshToken": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RefreshTokenLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRoutePostAuthRefreshDashtoken": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "POST /auth/refresh-token",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationRefreshToken"
										}
									]
								]
							}
						},
						"DependsOn": "HttpApiIntegrationRefreshToken"
					},
					"ForgotPasswordLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["ForgotPasswordLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationForgotPassword": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ForgotPasswordLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRoutePostAuthForgotDashpassword": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "POST /auth/forgot-password",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationForgotPassword"
										}
									]
								]
							}
						},
						"DependsOn": "HttpApiIntegrationForgotPassword"
					},
					"ResetPasswordLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["ResetPasswordLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationResetPassword": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ResetPasswordLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRoutePostAuthResetDashpassword": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "POST /auth/reset-password",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationResetPassword"
										}
									]
								]
							}
						},
						"DependsOn": "HttpApiIntegrationResetPassword"
					},
					"CreateUserLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["CreateUserLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationCreateUser": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRoutePostUsers": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "POST /users",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationCreateUser"
										}
									]
								]
							},
							"AuthorizationType": "JWT",
							"AuthorizerId": {
								"Ref": "HttpApiAuthorizerCognitoAuthorizer"
							}
						},
						"DependsOn": "HttpApiIntegrationCreateUser"
					},
					"DeleteUserLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["DeleteUserLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationDeleteUser": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRouteDeleteUsers": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "DELETE /users",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationDeleteUser"
										}
									]
								]
							},
							"AuthorizationType": "JWT",
							"AuthorizerId": {
								"Ref": "HttpApiAuthorizerCognitoAuthorizer"
							}
						},
						"DependsOn": "HttpApiIntegrationDeleteUser"
					},
					"ListUsersLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["ListUsersLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationListUsers": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ListUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRouteGetUsers": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "GET /users",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationListUsers"
										}
									]
								]
							},
							"AuthorizationType": "JWT",
							"AuthorizerId": {
								"Ref": "HttpApiAuthorizerCognitoAuthorizer"
							}
						},
						"DependsOn": "HttpApiIntegrationListUsers"
					},
					"MeLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["MeLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationMe": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"MeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRouteGetUsersMe": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "GET /users/me",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationMe"
										}
									]
								]
							},
							"AuthorizationType": "JWT",
							"AuthorizerId": {
								"Ref": "HttpApiAuthorizerCognitoAuthorizer"
							}
						},
						"DependsOn": "HttpApiIntegrationMe"
					},
					"UpdateUserLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["UpdateUserLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationUpdateUser": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRoutePutUsersUseridVar": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "PUT /users/{userId}",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationUpdateUser"
										}
									]
								]
							},
							"AuthorizationType": "JWT",
							"AuthorizerId": {
								"Ref": "HttpApiAuthorizerCognitoAuthorizer"
							}
						},
						"DependsOn": "HttpApiIntegrationUpdateUser"
					},
					"CreateIngredientLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["CreateIngredientLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationCreateIngredient": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateIngredientLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRoutePostIngredients": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "POST /ingredients",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationCreateIngredient"
										}
									]
								]
							},
							"AuthorizationType": "JWT",
							"AuthorizerId": {
								"Ref": "HttpApiAuthorizerCognitoAuthorizer"
							}
						},
						"DependsOn": "HttpApiIntegrationCreateIngredient"
					},
					"ListIngredientsLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["ListIngredientsLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationListIngredients": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ListIngredientsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRouteGetIngredients": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "GET /ingredients",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationListIngredients"
										}
									]
								]
							},
							"AuthorizationType": "JWT",
							"AuthorizerId": {
								"Ref": "HttpApiAuthorizerCognitoAuthorizer"
							}
						},
						"DependsOn": "HttpApiIntegrationListIngredients"
					},
					"DeleteIngredientLambdaPermissionHttpApi": {
						"Type": "AWS::Lambda::Permission",
						"Properties": {
							"FunctionName": {
								"Fn::GetAtt": ["DeleteIngredientLambdaFunction", "Arn"]
							},
							"Action": "lambda:InvokeFunction",
							"Principal": "apigateway.amazonaws.com",
							"SourceArn": {
								"Fn::Join": [
									"",
									[
										"arn:",
										{
											"Ref": "AWS::Partition"
										},
										":execute-api:",
										{
											"Ref": "AWS::Region"
										},
										":",
										{
											"Ref": "AWS::AccountId"
										},
										":",
										{
											"Ref": "HttpApi"
										},
										"/*"
									]
								]
							}
						}
					},
					"HttpApiIntegrationDeleteIngredient": {
						"Type": "AWS::ApiGatewayV2::Integration",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"IntegrationType": "AWS_PROXY",
							"IntegrationUri": {
								"$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteIngredientLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
							},
							"PayloadFormatVersion": "2.0",
							"TimeoutInMillis": 30000
						}
					},
					"HttpApiRouteDeleteIngredients": {
						"Type": "AWS::ApiGatewayV2::Route",
						"Properties": {
							"ApiId": {
								"Ref": "HttpApi"
							},
							"RouteKey": "DELETE /ingredients",
							"Target": {
								"Fn::Join": [
									"/",
									[
										"integrations",
										{
											"Ref": "HttpApiIntegrationDeleteIngredient"
										}
									]
								]
							},
							"AuthorizationType": "JWT",
							"AuthorizerId": {
								"Ref": "HttpApiAuthorizerCognitoAuthorizer"
							}
						},
						"DependsOn": "HttpApiIntegrationDeleteIngredient"
					},
					"WaiterAppUserPool": {
						"Type": "AWS::Cognito::UserPool",
						"Properties": {
							"UserPoolName": "WaiterAppUserPool",
							"MfaConfiguration": "OFF",
							"AutoVerifiedAttributes": ["email"],
							"AdminCreateUserConfig": {
								"AllowAdminCreateUserOnly": false
							},
							"UsernameAttributes": ["email"],
							"AccountRecoverySetting": {
								"RecoveryMechanisms": [
									{
										"Name": "verified_email",
										"Priority": 1
									}
								]
							},
							"Policies": {
								"PasswordPolicy": {
									"MinimumLength": 8,
									"RequireLowercase": false,
									"RequireNumbers": false,
									"RequireSymbols": false,
									"RequireUppercase": false,
									"TemporaryPasswordValidityDays": 7
								}
							},
							"Schema": [
								{
									"Name": "name",
									"Mutable": true,
									"Required": true,
									"AttributeDataType": "String"
								},
								{
									"Name": "role",
									"Mutable": true,
									"Required": false,
									"AttributeDataType": "String"
								}
							]
						}
					},
					"WaiterAppUserPoolClient": {
						"Type": "AWS::Cognito::UserPoolClient",
						"Properties": {
							"ClientName": "WaiterAppUserPoolClient",
							"UserPoolId": {
								"Ref": "WaiterAppUserPool"
							},
							"ExplicitAuthFlows": [
								"ALLOW_USER_PASSWORD_AUTH",
								"ALLOW_REFRESH_TOKEN_AUTH"
							],
							"TokenValidityUnits": {
								"AccessToken": "hours",
								"RefreshToken": "hours"
							},
							"AccessTokenValidity": 3,
							"RefreshTokenValidity": 168
						}
					},
					"WaiterAppTable": {
						"Type": "AWS::DynamoDB::Table",
						"Properties": {
							"TableName": "WaiterAppTable",
							"BillingMode": "PAY_PER_REQUEST",
							"PointInTimeRecoverySpecification": {
								"PointInTimeRecoveryEnabled": true
							},
							"AttributeDefinitions": [
								{
									"AttributeName": "PK",
									"AttributeType": "S"
								},
								{
									"AttributeName": "SK",
									"AttributeType": "S"
								},
								{
									"AttributeName": "GSI1PK",
									"AttributeType": "S"
								},
								{
									"AttributeName": "GSI1SK",
									"AttributeType": "S"
								}
							],
							"KeySchema": [
								{
									"AttributeName": "PK",
									"KeyType": "HASH"
								},
								{
									"AttributeName": "SK",
									"KeyType": "RANGE"
								}
							],
							"GlobalSecondaryIndexes": [
								{
									"IndexName": "GSI1PK-GSI1SK-index",
									"KeySchema": [
										{
											"AttributeName": "GSI1PK",
											"KeyType": "HASH"
										},
										{
											"AttributeName": "GSI1SK",
											"KeyType": "RANGE"
										}
									],
									"Projection": {
										"ProjectionType": "ALL"
									}
								}
							]
						}
					}
				},
				"Outputs": {
					"ServerlessDeploymentBucketName": {
						"Value": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
						"Export": {
							"Name": "sls-waiterapp-dev-ServerlessDeploymentBucketName"
						}
					},
					"SignInLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "SignInLambdaVersionUHmJ6mUiCXN59Dp1B2fByvlcbrJ9GM3jiYn2Fjtg"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-SignInLambdaFunctionQualifiedArn"
						}
					},
					"RefreshTokenLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "RefreshTokenLambdaVersionzWLImJ91hIN4uC43VSFvMj2Kyk79VUC2DjeLzv9nt3I"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-RefreshTokenLambdaFunctionQualifiedArn"
						}
					},
					"ForgotPasswordLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "ForgotPasswordLambdaVersionUBCVC255HHQ87QuUUOVwt1hiR7WoXAyPhVKj6F5Q"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-ForgotPasswordLambdaFunctionQualifiedArn"
						}
					},
					"ResetPasswordLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "ResetPasswordLambdaVersionH46vQQRzBHhxtMLhPpAf2gd2RGRGtrKBjY1UXoMSdA"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-ResetPasswordLambdaFunctionQualifiedArn"
						}
					},
					"DeleteUserLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "DeleteUserLambdaVersion5sKXJokSRaJMQLCUeZw8Cb0ft04iMEn0yzbNZ3G8"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-DeleteUserLambdaFunctionQualifiedArn"
						}
					},
					"CreateUserLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "CreateUserLambdaVersionRLkr72DxuCxdyTqqi3d60sRXq1JchhhOwnMOOaOGpm8"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-CreateUserLambdaFunctionQualifiedArn"
						}
					},
					"ListUsersLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "ListUsersLambdaVersioneGLsv4b8kDsqzEigOTQp2ujh7Z3rl5pxXAeceulE6LQ"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-ListUsersLambdaFunctionQualifiedArn"
						}
					},
					"AccountConfirmationLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "AccountConfirmationLambdaVersionMr9cNDzTiKb3ZJIgC2LTvepFVwiwKM1uHhwgNDH4s"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-AccountConfirmationLambdaFunctionQualifiedArn"
						}
					},
					"MeLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "MeLambdaVersion8T2q34hiAyBveUTZmvDCgsZO3sbHNUU99mfC7Bqr0"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-MeLambdaFunctionQualifiedArn"
						}
					},
					"UpdateUserLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "UpdateUserLambdaVersionRu5jqWsyJyaTMKmAgJ2TUdFXCaaSmIvltfNjv4dJgm0"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-UpdateUserLambdaFunctionQualifiedArn"
						}
					},
					"CreateIngredientLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "CreateIngredientLambdaVersionA8YZ4rocOl4CmuC16d7bHvmOtb9MMYH9VtdMTewVk"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-CreateIngredientLambdaFunctionQualifiedArn"
						}
					},
					"DeleteIngredientLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "DeleteIngredientLambdaVersionGLbSNI0uXokRNZQgpmE244ORy2NVytoIYEA4swjjH0"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-DeleteIngredientLambdaFunctionQualifiedArn"
						}
					},
					"ListIngredientsLambdaFunctionQualifiedArn": {
						"Description": "Current Lambda function version",
						"Value": {
							"Ref": "ListIngredientsLambdaVersionCVkaDmYpKhLRF3sqm78T3K6AJT5kVlWN6tOouqWGw"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-ListIngredientsLambdaFunctionQualifiedArn"
						}
					},
					"HttpApiId": {
						"Description": "Id of the HTTP API",
						"Value": {
							"Ref": "HttpApi"
						},
						"Export": {
							"Name": "sls-waiterapp-dev-HttpApiId"
						}
					},
					"HttpApiUrl": {
						"Description": "URL of the HTTP API",
						"Value": {
							"Fn::Join": [
								"",
								[
									"https://",
									{
										"Ref": "HttpApi"
									},
									".execute-api.",
									{
										"Ref": "AWS::Region"
									},
									".",
									{
										"Ref": "AWS::URLSuffix"
									}
								]
							]
						},
						"Export": {
							"Name": "sls-waiterapp-dev-HttpApiUrl"
						}
					}
				}
			},
			"vpc": {}
		},
		"custom": {
			"bundle": true,
			"minify": true,
			"sourcemap": false,
			"target": "node20",
			"esbuild": {
				"exclude": ["@aws-sdk/*"]
			},
			"define": {
				"require.resolve": "undefined"
			},
			"platform": "node",
			"concurrency": 10
		},
		"pluginsData": {},
		"functions": {
			"accountConfirmation": {
				"handler": "src/server/functions/auth/accountConfirmation.handler",
				"events": [
					{
						"httpApi": {
							"method": "POST",
							"path": "/auth/account-confirmation",
							"authorizer": {
								"name": "CognitoAuthorizer"
							}
						},
						"resolvedMethod": "POST",
						"resolvedPath": "/auth/account-confirmation"
					}
				],
				"name": "waiterapp-dev-accountConfirmation",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-accountConfirmation.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "AccountConfirmationLambdaVersionMr9cNDzTiKb3ZJIgC2LTvepFVwiwKM1uHhwgNDH4s"
			},
			"signIn": {
				"handler": "src/server/functions/auth/signIn.handler",
				"events": [
					{
						"httpApi": {
							"method": "POST",
							"path": "/auth/sign-in"
						},
						"resolvedMethod": "POST",
						"resolvedPath": "/auth/sign-in"
					}
				],
				"name": "waiterapp-dev-signIn",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-signIn.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "SignInLambdaVersionUHmJ6mUiCXN59Dp1B2fByvlcbrJ9GM3jiYn2Fjtg"
			},
			"refreshToken": {
				"handler": "src/server/functions/auth/refreshToken.handler",
				"events": [
					{
						"httpApi": {
							"method": "POST",
							"path": "/auth/refresh-token"
						},
						"resolvedMethod": "POST",
						"resolvedPath": "/auth/refresh-token"
					}
				],
				"name": "waiterapp-dev-refreshToken",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-refreshToken.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "RefreshTokenLambdaVersionzWLImJ91hIN4uC43VSFvMj2Kyk79VUC2DjeLzv9nt3I"
			},
			"forgotPassword": {
				"handler": "src/server/functions/auth/forgotPassword.handler",
				"events": [
					{
						"httpApi": {
							"method": "POST",
							"path": "/auth/forgot-password"
						},
						"resolvedMethod": "POST",
						"resolvedPath": "/auth/forgot-password"
					}
				],
				"name": "waiterapp-dev-forgotPassword",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-forgotPassword.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "ForgotPasswordLambdaVersionUBCVC255HHQ87QuUUOVwt1hiR7WoXAyPhVKj6F5Q"
			},
			"resetPassword": {
				"handler": "src/server/functions/auth/resetPassword.handler",
				"events": [
					{
						"httpApi": {
							"method": "POST",
							"path": "/auth/reset-password"
						},
						"resolvedMethod": "POST",
						"resolvedPath": "/auth/reset-password"
					}
				],
				"name": "waiterapp-dev-resetPassword",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-resetPassword.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "ResetPasswordLambdaVersionH46vQQRzBHhxtMLhPpAf2gd2RGRGtrKBjY1UXoMSdA"
			},
			"createUser": {
				"handler": "src/server/functions/users/createUser.handler",
				"events": [
					{
						"httpApi": {
							"method": "POST",
							"path": "/users",
							"authorizer": {
								"name": "CognitoAuthorizer"
							}
						},
						"resolvedMethod": "POST",
						"resolvedPath": "/users"
					}
				],
				"name": "waiterapp-dev-createUser",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-createUser.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "CreateUserLambdaVersionRLkr72DxuCxdyTqqi3d60sRXq1JchhhOwnMOOaOGpm8"
			},
			"deleteUser": {
				"handler": "src/server/functions/users/deleteUser.handler",
				"events": [
					{
						"httpApi": {
							"method": "DELETE",
							"path": "/users",
							"authorizer": {
								"name": "CognitoAuthorizer"
							}
						},
						"resolvedMethod": "DELETE",
						"resolvedPath": "/users"
					}
				],
				"name": "waiterapp-dev-deleteUser",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-deleteUser.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "DeleteUserLambdaVersion5sKXJokSRaJMQLCUeZw8Cb0ft04iMEn0yzbNZ3G8"
			},
			"listUsers": {
				"handler": "src/server/functions/users/listUsers.handler",
				"events": [
					{
						"httpApi": {
							"method": "GET",
							"path": "/users",
							"authorizer": {
								"name": "CognitoAuthorizer"
							}
						},
						"resolvedMethod": "GET",
						"resolvedPath": "/users"
					}
				],
				"name": "waiterapp-dev-listUsers",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-listUsers.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "ListUsersLambdaVersioneGLsv4b8kDsqzEigOTQp2ujh7Z3rl5pxXAeceulE6LQ"
			},
			"me": {
				"handler": "src/server/functions/users/me.handler",
				"events": [
					{
						"httpApi": {
							"method": "GET",
							"path": "/users/me",
							"authorizer": {
								"name": "CognitoAuthorizer"
							}
						},
						"resolvedMethod": "GET",
						"resolvedPath": "/users/me"
					}
				],
				"name": "waiterapp-dev-me",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-me.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "MeLambdaVersion8T2q34hiAyBveUTZmvDCgsZO3sbHNUU99mfC7Bqr0"
			},
			"updateUser": {
				"handler": "src/server/functions/users/updateUser.handler",
				"events": [
					{
						"httpApi": {
							"method": "PUT",
							"path": "/users/{userId}",
							"authorizer": {
								"name": "CognitoAuthorizer"
							}
						},
						"resolvedMethod": "PUT",
						"resolvedPath": "/users/{userId}"
					}
				],
				"name": "waiterapp-dev-updateUser",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-updateUser.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "UpdateUserLambdaVersionRu5jqWsyJyaTMKmAgJ2TUdFXCaaSmIvltfNjv4dJgm0"
			},
			"createIngredient": {
				"handler": "src/server/functions/ingredients/createIngredient.handler",
				"events": [
					{
						"httpApi": {
							"method": "POST",
							"path": "/ingredients",
							"authorizer": {
								"name": "CognitoAuthorizer"
							}
						},
						"resolvedMethod": "POST",
						"resolvedPath": "/ingredients"
					}
				],
				"name": "waiterapp-dev-createIngredient",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-createIngredient.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "CreateIngredientLambdaVersionA8YZ4rocOl4CmuC16d7bHvmOtb9MMYH9VtdMTewVk"
			},
			"listIngredients": {
				"handler": "src/server/functions/ingredients/listIngredients.handler",
				"events": [
					{
						"httpApi": {
							"method": "GET",
							"path": "/ingredients",
							"authorizer": {
								"name": "CognitoAuthorizer"
							}
						},
						"resolvedMethod": "GET",
						"resolvedPath": "/ingredients"
					}
				],
				"name": "waiterapp-dev-listIngredients",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-listIngredients.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "ListIngredientsLambdaVersionCVkaDmYpKhLRF3sqm78T3K6AJT5kVlWN6tOouqWGw"
			},
			"deleteIngredient": {
				"handler": "src/server/functions/ingredients/deleteIngredient.handler",
				"events": [
					{
						"httpApi": {
							"method": "DELETE",
							"path": "/ingredients",
							"authorizer": {
								"name": "CognitoAuthorizer"
							}
						},
						"resolvedMethod": "DELETE",
						"resolvedPath": "/ingredients"
					}
				],
				"name": "waiterapp-dev-deleteIngredient",
				"environment": {
					"NODE_OPTIONS": "--enable-source-maps"
				},
				"package": {
					"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-deleteIngredient.zip"
				},
				"memory": 1024,
				"timeout": 6,
				"runtime": "nodejs20.x",
				"vpc": {},
				"versionLogicalId": "DeleteIngredientLambdaVersionGLbSNI0uXokRNZQgpmE244ORy2NVytoIYEA4swjjH0"
			}
		},
		"resources": {
			"Resources": {
				"WaiterAppUserPool": {
					"Type": "AWS::Cognito::UserPool",
					"Properties": {
						"UserPoolName": "WaiterAppUserPool",
						"MfaConfiguration": "OFF",
						"AutoVerifiedAttributes": ["email"],
						"AdminCreateUserConfig": {
							"AllowAdminCreateUserOnly": false
						},
						"UsernameAttributes": ["email"],
						"AccountRecoverySetting": {
							"RecoveryMechanisms": [
								{
									"Name": "verified_email",
									"Priority": 1
								}
							]
						},
						"Policies": {
							"PasswordPolicy": {
								"MinimumLength": 8,
								"RequireLowercase": false,
								"RequireNumbers": false,
								"RequireSymbols": false,
								"RequireUppercase": false,
								"TemporaryPasswordValidityDays": 7
							}
						},
						"Schema": [
							{
								"Name": "name",
								"Mutable": true,
								"Required": true,
								"AttributeDataType": "String"
							},
							{
								"Name": "role",
								"Mutable": true,
								"Required": false,
								"AttributeDataType": "String"
							}
						]
					}
				},
				"WaiterAppUserPoolClient": {
					"Type": "AWS::Cognito::UserPoolClient",
					"Properties": {
						"ClientName": "WaiterAppUserPoolClient",
						"UserPoolId": {
							"Ref": "WaiterAppUserPool"
						},
						"ExplicitAuthFlows": [
							"ALLOW_USER_PASSWORD_AUTH",
							"ALLOW_REFRESH_TOKEN_AUTH"
						],
						"TokenValidityUnits": {
							"AccessToken": "hours",
							"RefreshToken": "hours"
						},
						"AccessTokenValidity": 3,
						"RefreshTokenValidity": 168
					}
				},
				"WaiterAppTable": {
					"Type": "AWS::DynamoDB::Table",
					"Properties": {
						"TableName": "WaiterAppTable",
						"BillingMode": "PAY_PER_REQUEST",
						"PointInTimeRecoverySpecification": {
							"PointInTimeRecoveryEnabled": true
						},
						"AttributeDefinitions": [
							{
								"AttributeName": "PK",
								"AttributeType": "S"
							},
							{
								"AttributeName": "SK",
								"AttributeType": "S"
							},
							{
								"AttributeName": "GSI1PK",
								"AttributeType": "S"
							},
							{
								"AttributeName": "GSI1SK",
								"AttributeType": "S"
							}
						],
						"KeySchema": [
							{
								"AttributeName": "PK",
								"KeyType": "HASH"
							},
							{
								"AttributeName": "SK",
								"KeyType": "RANGE"
							}
						],
						"GlobalSecondaryIndexes": [
							{
								"IndexName": "GSI1PK-GSI1SK-index",
								"KeySchema": [
									{
										"AttributeName": "GSI1PK",
										"KeyType": "HASH"
									},
									{
										"AttributeName": "GSI1SK",
										"KeyType": "RANGE"
									}
								],
								"Projection": {
									"ProjectionType": "ALL"
								}
							}
						]
					}
				}
			},
			"Outputs": {}
		},
		"configValidationMode": "warn",
		"serviceFilename": "serverless.yml",
		"initialServerlessConfig": {
			"service": "waiterapp",
			"frameworkVersion": "4",
			"package": {
				"individually": true,
				"artifactsS3KeyDirname": "serverless/waiterapp/dev/code-artifacts",
				"deploymentBucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
				"artifactDirectoryName": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z"
			},
			"provider": {
				"$ref": "$[\"service\"][\"provider\"]"
			},
			"custom": {
				"$ref": "$[\"service\"][\"custom\"]"
			},
			"resources": {
				"$ref": "$[\"service\"][\"resources\"]"
			},
			"functions": {
				"$ref": "$[\"service\"][\"functions\"]"
			}
		},
		"appId": null,
		"orgId": null,
		"layers": {}
	},
	"package": {
		"individually": true,
		"artifactDirectoryName": "serverless/waiterapp/dev/1729294852463-2024-10-18T23:40:52.463Z",
		"artifact": ""
	}
}
