{
	"/Users/pedro/Documents/dev/projects/waiterapp/api": {
		"versionSfCore": null,
		"versionFramework": "4.4.4",
		"isWithinCompose": false,
		"isCompose": false,
		"composeOrgName": null,
		"composeResolverProviders": {
			"default-aws-credential-resolver": "<REDACTED>"
		},
		"composeServiceName": null,
		"servicePath": "/Users/pedro/Documents/dev/projects/waiterapp/api",
		"serviceConfigFileName": "serverless.yml",
		"service": {
			"service": "waiterapp",
			"frameworkVersion": "4",
			"package": {
				"individually": true,
				"artifactsS3KeyDirname": "serverless/waiterapp/dev/code-artifacts",
				"deploymentBucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
				"artifactDirectoryName": "serverless/waiterapp/dev/1728474810282-2024-10-09T11:53:30.282Z"
			},
			"provider": {
				"name": "aws",
				"region": "us-east-1",
				"runtime": "nodejs20.x",
				"deploymentMethod": "direct",
				"architecture": "arm64",
				"environment": {
					"COGNITO_CLIENT_ID": {
						"Ref": "WaiterAppUserPoolClient"
					}
				},
				"iam": {
					"role": {
						"statements": [
							{
								"Effect": "Allow",
								"Action": [
									"dynamodb:PutItem",
									"dynamodb:DeleteItem",
									"dynamodb:GetItem",
									"dynamodb:UpdateItem",
									"dynamodb:Query"
								],
								"Resource": [
									{
										"Fn::GetAtt": ["WaiterAppTable", "Arn"]
									}
								]
							}
						]
					}
				},
				"stage": "dev",
				"versionFunctions": true,
				"compiledCloudFormationTemplate": {
					"AWSTemplateFormatVersion": "2010-09-09",
					"Description": "The AWS CloudFormation template for this Serverless application",
					"Resources": {
						"SignUpLogGroup": {
							"Type": "AWS::Logs::LogGroup",
							"Properties": {
								"LogGroupName": "/aws/lambda/waiterapp-dev-signUp"
							}
						},
						"AccountConfirmationLogGroup": {
							"Type": "AWS::Logs::LogGroup",
							"Properties": {
								"LogGroupName": "/aws/lambda/waiterapp-dev-accountConfirmation"
							}
						},
						"SignInLogGroup": {
							"Type": "AWS::Logs::LogGroup",
							"Properties": {
								"LogGroupName": "/aws/lambda/waiterapp-dev-signIn"
							}
						},
						"RefreshTokenLogGroup": "<REDACTED>",
						"ForgotPasswordLogGroup": "<REDACTED>",
						"ResetPasswordLogGroup": "<REDACTED>",
						"IamRoleLambdaExecution": {
							"Type": "AWS::IAM::Role",
							"Properties": {
								"AssumeRolePolicyDocument": {
									"Version": "2012-10-17",
									"Statement": [
										{
											"Effect": "Allow",
											"Principal": {
												"Service": ["lambda.amazonaws.com"]
											},
											"Action": ["sts:AssumeRole"]
										}
									]
								},
								"Policies": [
									{
										"PolicyName": {
											"Fn::Join": ["-", ["waiterapp", "dev", "lambda"]]
										},
										"PolicyDocument": {
											"Version": "2012-10-17",
											"Statement": [
												{
													"Effect": "Allow",
													"Action": [
														"logs:CreateLogStream",
														"logs:CreateLogGroup",
														"logs:TagResource"
													],
													"Resource": [
														{
															"Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/waiterapp-dev*:*"
														}
													]
												},
												{
													"Effect": "Allow",
													"Action": ["logs:PutLogEvents"],
													"Resource": [
														{
															"Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/waiterapp-dev*:*:*"
														}
													]
												},
												{
													"Effect": "Allow",
													"Action": [
														"dynamodb:PutItem",
														"dynamodb:DeleteItem",
														"dynamodb:GetItem",
														"dynamodb:UpdateItem",
														"dynamodb:Query"
													],
													"Resource": [
														{
															"Fn::GetAtt": ["WaiterAppTable", "Arn"]
														}
													]
												}
											]
										}
									}
								],
								"Path": "/",
								"RoleName": {
									"Fn::Join": [
										"-",
										[
											"waiterapp",
											"dev",
											{
												"Ref": "AWS::Region"
											},
											"lambdaRole"
										]
									]
								}
							}
						},
						"SignUpLambdaFunction": {
							"Type": "AWS::Lambda::Function",
							"Properties": {
								"Code": {
									"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
									"S3Key": "serverless/waiterapp/dev/1728474810282-2024-10-09T11:53:30.282Z/waiterapp-signUp.zip"
								},
								"Handler": "src/server/functions/auth/signUp.handler",
								"Runtime": "nodejs20.x",
								"FunctionName": "waiterapp-dev-signUp",
								"MemorySize": 1024,
								"Timeout": 6,
								"Architectures": ["arm64"],
								"Environment": {
									"Variables": {
										"COGNITO_CLIENT_ID": {
											"Ref": "WaiterAppUserPoolClient"
										},
										"NODE_OPTIONS": "--enable-source-maps"
									}
								},
								"Role": {
									"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
								}
							},
							"DependsOn": ["SignUpLogGroup"]
						},
						"AccountConfirmationLambdaFunction": {
							"Type": "AWS::Lambda::Function",
							"Properties": {
								"Code": {
									"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
									"S3Key": "serverless/waiterapp/dev/1728474810282-2024-10-09T11:53:30.282Z/waiterapp-accountConfirmation.zip"
								},
								"Handler": "src/server/functions/auth/accountConfirmation.handler",
								"Runtime": "nodejs20.x",
								"FunctionName": "waiterapp-dev-accountConfirmation",
								"MemorySize": 1024,
								"Timeout": 6,
								"Architectures": ["arm64"],
								"Environment": {
									"Variables": {
										"COGNITO_CLIENT_ID": {
											"Ref": "WaiterAppUserPoolClient"
										},
										"NODE_OPTIONS": "--enable-source-maps"
									}
								},
								"Role": {
									"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
								}
							},
							"DependsOn": ["AccountConfirmationLogGroup"]
						},
						"SignInLambdaFunction": {
							"Type": "AWS::Lambda::Function",
							"Properties": {
								"Code": {
									"S3Bucket": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
									"S3Key": "serverless/waiterapp/dev/1728474810282-2024-10-09T11:53:30.282Z/waiterapp-signIn.zip"
								},
								"Handler": "src/server/functions/auth/signIn.handler",
								"Runtime": "nodejs20.x",
								"FunctionName": "waiterapp-dev-signIn",
								"MemorySize": 1024,
								"Timeout": 6,
								"Architectures": ["arm64"],
								"Environment": {
									"Variables": {
										"COGNITO_CLIENT_ID": {
											"Ref": "WaiterAppUserPoolClient"
										},
										"NODE_OPTIONS": "--enable-source-maps"
									}
								},
								"Role": {
									"Fn::GetAtt": ["IamRoleLambdaExecution", "Arn"]
								}
							},
							"DependsOn": ["SignInLogGroup"]
						},
						"RefreshTokenLambdaFunction": "<REDACTED>",
						"ForgotPasswordLambdaFunction": "<REDACTED>",
						"ResetPasswordLambdaFunction": "<REDACTED>",
						"RefreshTokenLambdaVersion16OF7UTcp7Ov4UiqY0RtktRHSWkeztvvw7Dhe1F5dM": "<REDACTED>",
						"ForgotPasswordLambdaVersionMJF5t940tklSxwRovIu3IiISumDX3MBbMrZ9JKhdM": "<REDACTED>",
						"ResetPasswordLambdaVersionr7K0vsMsIRPtSRtujvzDdvIcD6dmlTJCWtZPXeBCPs": "<REDACTED>",
						"SignInLambdaVersionaeCoMQH0m8XbaeoDUlUAlSJsgti64Y3pv5uUDlvoc": {
							"Type": "AWS::Lambda::Version",
							"DeletionPolicy": "Retain",
							"Properties": {
								"FunctionName": {
									"Ref": "SignInLambdaFunction"
								},
								"CodeSha256": "t5GkE4VkY6XhS9rcwZAQcRjWAyZGMu8h2bv1tngtVTg="
							}
						},
						"AccountConfirmationLambdaVersionZ8YjyY6qLiUwcHvKAhEANsQC2KCUDG9qPi5ZzyV4PI": {
							"Type": "AWS::Lambda::Version",
							"DeletionPolicy": "Retain",
							"Properties": {
								"FunctionName": {
									"Ref": "AccountConfirmationLambdaFunction"
								},
								"CodeSha256": "YOpPq0MSGmPFuu7/CyI0f8RW/JJKA6wtPpVWEyC8RYU="
							}
						},
						"SignUpLambdaVersionlJIMtKTGGsJjynsNDjtiEbSRROQ24ghDyLfYJ9XfvQ": {
							"Type": "AWS::Lambda::Version",
							"DeletionPolicy": "Retain",
							"Properties": {
								"FunctionName": {
									"Ref": "SignUpLambdaFunction"
								},
								"CodeSha256": "ORVY0RgPFUq/xcUB3qnTKmFvRkxdLXQymvAdPLoJi9s="
							}
						},
						"HttpApi": {
							"Type": "AWS::ApiGatewayV2::Api",
							"Properties": {
								"Name": "dev-waiterapp",
								"ProtocolType": "HTTP"
							}
						},
						"HttpApiStage": {
							"Type": "AWS::ApiGatewayV2::Stage",
							"Properties": {
								"ApiId": {
									"Ref": "HttpApi"
								},
								"StageName": "$default",
								"AutoDeploy": true,
								"DefaultRouteSettings": {
									"DetailedMetricsEnabled": false
								}
							}
						},
						"SignUpLambdaPermissionHttpApi": {
							"Type": "AWS::Lambda::Permission",
							"Properties": {
								"FunctionName": {
									"Fn::GetAtt": ["SignUpLambdaFunction", "Arn"]
								},
								"Action": "lambda:InvokeFunction",
								"Principal": "apigateway.amazonaws.com",
								"SourceArn": {
									"Fn::Join": [
										"",
										[
											"arn:",
											{
												"Ref": "AWS::Partition"
											},
											":execute-api:",
											{
												"Ref": "AWS::Region"
											},
											":",
											{
												"Ref": "AWS::AccountId"
											},
											":",
											{
												"Ref": "HttpApi"
											},
											"/*"
										]
									]
								}
							}
						},
						"HttpApiIntegrationSignUp": {
							"Type": "AWS::ApiGatewayV2::Integration",
							"Properties": {
								"ApiId": {
									"Ref": "HttpApi"
								},
								"IntegrationType": "AWS_PROXY",
								"IntegrationUri": {
									"Fn::GetAtt": ["SignUpLambdaFunction", "Arn"]
								},
								"PayloadFormatVersion": "2.0",
								"TimeoutInMillis": 30000
							}
						},
						"HttpApiRoutePostAuthSignDashup": {
							"Type": "AWS::ApiGatewayV2::Route",
							"Properties": {
								"ApiId": {
									"Ref": "HttpApi"
								},
								"RouteKey": "POST /auth/sign-up",
								"Target": {
									"Fn::Join": [
										"/",
										[
											"integrations",
											{
												"Ref": "HttpApiIntegrationSignUp"
											}
										]
									]
								}
							},
							"DependsOn": "HttpApiIntegrationSignUp"
						},
						"AccountConfirmationLambdaPermissionHttpApi": {
							"Type": "AWS::Lambda::Permission",
							"Properties": {
								"FunctionName": {
									"Fn::GetAtt": ["AccountConfirmationLambdaFunction", "Arn"]
								},
								"Action": "lambda:InvokeFunction",
								"Principal": "apigateway.amazonaws.com",
								"SourceArn": {
									"Fn::Join": [
										"",
										[
											"arn:",
											{
												"Ref": "AWS::Partition"
											},
											":execute-api:",
											{
												"Ref": "AWS::Region"
											},
											":",
											{
												"Ref": "AWS::AccountId"
											},
											":",
											{
												"Ref": "HttpApi"
											},
											"/*"
										]
									]
								}
							}
						},
						"HttpApiIntegrationAccountConfirmation": {
							"Type": "AWS::ApiGatewayV2::Integration",
							"Properties": {
								"ApiId": {
									"Ref": "HttpApi"
								},
								"IntegrationType": "AWS_PROXY",
								"IntegrationUri": {
									"Fn::GetAtt": ["AccountConfirmationLambdaFunction", "Arn"]
								},
								"PayloadFormatVersion": "2.0",
								"TimeoutInMillis": 30000
							}
						},
						"HttpApiRoutePostAuthAccountDashconfirmation": {
							"Type": "AWS::ApiGatewayV2::Route",
							"Properties": {
								"ApiId": {
									"Ref": "HttpApi"
								},
								"RouteKey": "POST /auth/account-confirmation",
								"Target": {
									"Fn::Join": [
										"/",
										[
											"integrations",
											{
												"Ref": "HttpApiIntegrationAccountConfirmation"
											}
										]
									]
								}
							},
							"DependsOn": "HttpApiIntegrationAccountConfirmation"
						},
						"SignInLambdaPermissionHttpApi": {
							"Type": "AWS::Lambda::Permission",
							"Properties": {
								"FunctionName": {
									"Fn::GetAtt": ["SignInLambdaFunction", "Arn"]
								},
								"Action": "lambda:InvokeFunction",
								"Principal": "apigateway.amazonaws.com",
								"SourceArn": {
									"Fn::Join": [
										"",
										[
											"arn:",
											{
												"Ref": "AWS::Partition"
											},
											":execute-api:",
											{
												"Ref": "AWS::Region"
											},
											":",
											{
												"Ref": "AWS::AccountId"
											},
											":",
											{
												"Ref": "HttpApi"
											},
											"/*"
										]
									]
								}
							}
						},
						"HttpApiIntegrationSignIn": {
							"Type": "AWS::ApiGatewayV2::Integration",
							"Properties": {
								"ApiId": {
									"Ref": "HttpApi"
								},
								"IntegrationType": "AWS_PROXY",
								"IntegrationUri": {
									"Fn::GetAtt": ["SignInLambdaFunction", "Arn"]
								},
								"PayloadFormatVersion": "2.0",
								"TimeoutInMillis": 30000
							}
						},
						"HttpApiRoutePostAuthSignDashin": {
							"Type": "AWS::ApiGatewayV2::Route",
							"Properties": {
								"ApiId": {
									"Ref": "HttpApi"
								},
								"RouteKey": "POST /auth/sign-in",
								"Target": {
									"Fn::Join": [
										"/",
										[
											"integrations",
											{
												"Ref": "HttpApiIntegrationSignIn"
											}
										]
									]
								}
							},
							"DependsOn": "HttpApiIntegrationSignIn"
						},
						"RefreshTokenLambdaPermissionHttpApi": "<REDACTED>",
						"HttpApiIntegrationRefreshToken": "<REDACTED>",
						"HttpApiRoutePostAuthRefreshDashtoken": "<REDACTED>",
						"ForgotPasswordLambdaPermissionHttpApi": "<REDACTED>",
						"HttpApiIntegrationForgotPassword": "<REDACTED>",
						"HttpApiRoutePostAuthForgotDashpassword": "<REDACTED>",
						"ResetPasswordLambdaPermissionHttpApi": "<REDACTED>",
						"HttpApiIntegrationResetPassword": "<REDACTED>",
						"HttpApiRoutePostAuthResetDashpassword": "<REDACTED>",
						"WaiterAppUserPool": {
							"Type": "AWS::Cognito::UserPool",
							"Properties": {
								"UserPoolName": "WaiterAppUserPool",
								"MfaConfiguration": "OFF",
								"AutoVerifiedAttributes": ["email"],
								"AdminCreateUserConfig": {
									"AllowAdminCreateUserOnly": false
								},
								"UsernameAttributes": ["email"],
								"AccountRecoverySetting": {
									"RecoveryMechanisms": [
										{
											"Name": "verified_email",
											"Priority": 1
										}
									]
								},
								"Policies": {
									"PasswordPolicy": "<REDACTED>"
								},
								"Schema": [
									{
										"Name": "name",
										"Mutable": true,
										"Required": true,
										"AttributeDataType": "String"
									},
									{
										"Name": "role",
										"Mutable": true,
										"Required": false,
										"AttributeDataType": "String"
									}
								]
							}
						},
						"WaiterAppUserPoolClient": {
							"Type": "AWS::Cognito::UserPoolClient",
							"Properties": {
								"ClientName": "WaiterAppUserPoolClient",
								"UserPoolId": {
									"Ref": "WaiterAppUserPool"
								},
								"ExplicitAuthFlows": [
									"ALLOW_USER_PASSWORD_AUTH",
									"ALLOW_REFRESH_TOKEN_AUTH"
								],
								"TokenValidityUnits": "<REDACTED>",
								"AccessTokenValidity": "<REDACTED>",
								"RefreshTokenValidity": "<REDACTED>"
							}
						},
						"WaiterAppTable": {
							"Type": "AWS::DynamoDB::Table",
							"Properties": {
								"TableName": "WaiterAppTable",
								"BillingMode": "PAY_PER_REQUEST",
								"PointInTimeRecoverySpecification": {
									"PointInTimeRecoveryEnabled": true
								},
								"AttributeDefinitions": [
									{
										"AttributeName": "PK",
										"AttributeType": "S"
									},
									{
										"AttributeName": "SK",
										"AttributeType": "S"
									},
									{
										"AttributeName": "GSI1PK",
										"AttributeType": "S"
									},
									{
										"AttributeName": "GSI1SK",
										"AttributeType": "S"
									}
								],
								"KeySchema": [
									{
										"AttributeName": "PK",
										"KeyType": "HASH"
									},
									{
										"AttributeName": "SK",
										"KeyType": "RANGE"
									}
								],
								"GlobalSecondaryIndexes": [
									{
										"IndexName": "GSI1PK-GSI1SK-index",
										"KeySchema": [
											{
												"AttributeName": "GSI1PK",
												"KeyType": "HASH"
											},
											{
												"AttributeName": "GSI1SK",
												"KeyType": "RANGE"
											}
										],
										"Projection": {
											"ProjectionType": "ALL"
										}
									}
								]
							}
						}
					},
					"Outputs": {
						"ServerlessDeploymentBucketName": {
							"Value": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
							"Export": {
								"Name": "sls-waiterapp-dev-ServerlessDeploymentBucketName"
							}
						},
						"RefreshTokenLambdaFunctionQualifiedArn": "<REDACTED>",
						"ForgotPasswordLambdaFunctionQualifiedArn": "<REDACTED>",
						"ResetPasswordLambdaFunctionQualifiedArn": "<REDACTED>",
						"SignInLambdaFunctionQualifiedArn": {
							"Description": "Current Lambda function version",
							"Value": {
								"Ref": "SignInLambdaVersionaeCoMQH0m8XbaeoDUlUAlSJsgti64Y3pv5uUDlvoc"
							},
							"Export": {
								"Name": "sls-waiterapp-dev-SignInLambdaFunctionQualifiedArn"
							}
						},
						"AccountConfirmationLambdaFunctionQualifiedArn": {
							"Description": "Current Lambda function version",
							"Value": {
								"Ref": "AccountConfirmationLambdaVersionZ8YjyY6qLiUwcHvKAhEANsQC2KCUDG9qPi5ZzyV4PI"
							},
							"Export": {
								"Name": "sls-waiterapp-dev-AccountConfirmationLambdaFunctionQualifiedArn"
							}
						},
						"SignUpLambdaFunctionQualifiedArn": {
							"Description": "Current Lambda function version",
							"Value": {
								"Ref": "SignUpLambdaVersionlJIMtKTGGsJjynsNDjtiEbSRROQ24ghDyLfYJ9XfvQ"
							},
							"Export": {
								"Name": "sls-waiterapp-dev-SignUpLambdaFunctionQualifiedArn"
							}
						},
						"HttpApiId": {
							"Description": "Id of the HTTP API",
							"Value": {
								"Ref": "HttpApi"
							},
							"Export": {
								"Name": "sls-waiterapp-dev-HttpApiId"
							}
						},
						"HttpApiUrl": {
							"Description": "URL of the HTTP API",
							"Value": {
								"Fn::Join": [
									"",
									[
										"https://",
										{
											"Ref": "HttpApi"
										},
										".execute-api.",
										{
											"Ref": "AWS::Region"
										},
										".",
										{
											"Ref": "AWS::URLSuffix"
										}
									]
								]
							},
							"Export": {
								"Name": "sls-waiterapp-dev-HttpApiUrl"
							}
						}
					}
				},
				"vpc": {}
			},
			"custom": {
				"bundle": true,
				"minify": true,
				"sourcemap": false,
				"target": "node20",
				"exclude": ["@aws-sdk/*"],
				"define": {
					"require.resolve": "undefined"
				},
				"platform": "node",
				"concurrency": 10
			},
			"resources": {
				"Resources": {
					"WaiterAppUserPool": {
						"Type": "AWS::Cognito::UserPool",
						"Properties": {
							"UserPoolName": "WaiterAppUserPool",
							"MfaConfiguration": "OFF",
							"AutoVerifiedAttributes": ["email"],
							"AdminCreateUserConfig": {
								"AllowAdminCreateUserOnly": false
							},
							"UsernameAttributes": ["email"],
							"AccountRecoverySetting": {
								"RecoveryMechanisms": [
									{
										"Name": "verified_email",
										"Priority": 1
									}
								]
							},
							"Policies": {
								"PasswordPolicy": "<REDACTED>"
							},
							"Schema": [
								{
									"Name": "name",
									"Mutable": true,
									"Required": true,
									"AttributeDataType": "String"
								},
								{
									"Name": "role",
									"Mutable": true,
									"Required": false,
									"AttributeDataType": "String"
								}
							]
						}
					},
					"WaiterAppUserPoolClient": {
						"Type": "AWS::Cognito::UserPoolClient",
						"Properties": {
							"ClientName": "WaiterAppUserPoolClient",
							"UserPoolId": {
								"Ref": "WaiterAppUserPool"
							},
							"ExplicitAuthFlows": [
								"ALLOW_USER_PASSWORD_AUTH",
								"ALLOW_REFRESH_TOKEN_AUTH"
							],
							"TokenValidityUnits": "<REDACTED>",
							"AccessTokenValidity": "<REDACTED>",
							"RefreshTokenValidity": "<REDACTED>"
						}
					},
					"WaiterAppTable": {
						"Type": "AWS::DynamoDB::Table",
						"Properties": {
							"TableName": "WaiterAppTable",
							"BillingMode": "PAY_PER_REQUEST",
							"PointInTimeRecoverySpecification": {
								"PointInTimeRecoveryEnabled": true
							},
							"AttributeDefinitions": [
								{
									"AttributeName": "PK",
									"AttributeType": "S"
								},
								{
									"AttributeName": "SK",
									"AttributeType": "S"
								},
								{
									"AttributeName": "GSI1PK",
									"AttributeType": "S"
								},
								{
									"AttributeName": "GSI1SK",
									"AttributeType": "S"
								}
							],
							"KeySchema": [
								{
									"AttributeName": "PK",
									"KeyType": "HASH"
								},
								{
									"AttributeName": "SK",
									"KeyType": "RANGE"
								}
							],
							"GlobalSecondaryIndexes": [
								{
									"IndexName": "GSI1PK-GSI1SK-index",
									"KeySchema": [
										{
											"AttributeName": "GSI1PK",
											"KeyType": "HASH"
										},
										{
											"AttributeName": "GSI1SK",
											"KeyType": "RANGE"
										}
									],
									"Projection": {
										"ProjectionType": "ALL"
									}
								}
							]
						}
					}
				},
				"Outputs": {}
			},
			"functions": {
				"signUp": {
					"handler": "src/server/functions/auth/signUp.handler",
					"events": [
						{
							"httpApi": {
								"method": "POST",
								"path": "/auth/sign-up"
							},
							"resolvedMethod": "POST",
							"resolvedPath": "/auth/sign-up"
						}
					],
					"name": "waiterapp-dev-signUp",
					"environment": {
						"NODE_OPTIONS": "--enable-source-maps"
					},
					"package": {
						"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-signUp.zip"
					},
					"memory": 1024,
					"timeout": 6,
					"runtime": "nodejs20.x",
					"vpc": {},
					"versionLogicalId": "SignUpLambdaVersionlJIMtKTGGsJjynsNDjtiEbSRROQ24ghDyLfYJ9XfvQ"
				},
				"accountConfirmation": {
					"handler": "src/server/functions/auth/accountConfirmation.handler",
					"events": [
						{
							"httpApi": {
								"method": "POST",
								"path": "/auth/account-confirmation"
							},
							"resolvedMethod": "POST",
							"resolvedPath": "/auth/account-confirmation"
						}
					],
					"name": "waiterapp-dev-accountConfirmation",
					"environment": {
						"NODE_OPTIONS": "--enable-source-maps"
					},
					"package": {
						"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-accountConfirmation.zip"
					},
					"memory": 1024,
					"timeout": 6,
					"runtime": "nodejs20.x",
					"vpc": {},
					"versionLogicalId": "AccountConfirmationLambdaVersionZ8YjyY6qLiUwcHvKAhEANsQC2KCUDG9qPi5ZzyV4PI"
				},
				"signIn": {
					"handler": "src/server/functions/auth/signIn.handler",
					"events": [
						{
							"httpApi": {
								"method": "POST",
								"path": "/auth/sign-in"
							},
							"resolvedMethod": "POST",
							"resolvedPath": "/auth/sign-in"
						}
					],
					"name": "waiterapp-dev-signIn",
					"environment": {
						"NODE_OPTIONS": "--enable-source-maps"
					},
					"package": {
						"artifact": "/Users/pedro/Documents/dev/projects/waiterapp/api/.serverless/build/waiterapp-signIn.zip"
					},
					"memory": 1024,
					"timeout": 6,
					"runtime": "nodejs20.x",
					"vpc": {},
					"versionLogicalId": "SignInLambdaVersionaeCoMQH0m8XbaeoDUlUAlSJsgti64Y3pv5uUDlvoc"
				},
				"refreshToken": "<REDACTED>",
				"forgotPassword": "<REDACTED>",
				"resetPassword": "<REDACTED>"
			}
		},
		"serviceRawFile": "service: waiterapp\nframeworkVersion: \"4\"\n\npackage:\n  individually: true\n\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: nodejs20.x\n  deploymentMethod: direct\n  architecture: arm64\n  environment:\n    COGNITO_CLIENT_ID: !Ref WaiterAppUserPoolClient\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - dynamodb:PutItem\n            - dynamodb:DeleteItem\n            - dynamodb:GetItem\n            - dynamodb:UpdateItem\n            - dynamodb:Query\n          Resource:\n            - !GetAtt WaiterAppTable.Arn\n\ncustom:\n  bundle: true\n  minify: true\n  sourcemap: false\n  target: node20\n  exclude:\n    - \"@aws-sdk/*\"\n  define:\n    require.resolve: undefined\n  platform: node\n  concurrency: 10\n\nresources:\n  Resources:\n    WaiterAppUserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UserPoolName: WaiterAppUserPool\n        MfaConfiguration: OFF\n        AutoVerifiedAttributes:\n          - email\n        AdminCreateUserConfig:\n          AllowAdminCreateUserOnly: false\n        UsernameAttributes:\n          - email\n        AccountRecoverySetting:\n          RecoveryMechanisms:\n            - Name: \"verified_email\"\n              Priority: 1\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 8\n            RequireLowercase: false\n            RequireNumbers: false\n            RequireSymbols: false\n            RequireUppercase: false\n            TemporaryPasswordValidityDays: 7\n        Schema:\n          - Name: name\n            Mutable: true\n            Required: true\n            AttributeDataType: String\n          - Name: role\n            Mutable: true\n            Required: false\n            AttributeDataType: String\n    WaiterAppUserPoolClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        ClientName: WaiterAppUserPoolClient\n        UserPoolId: !Ref WaiterAppUserPool\n        ExplicitAuthFlows:\n          - ALLOW_USER_PASSWORD_AUTH\n          - ALLOW_REFRESH_TOKEN_AUTH\n        TokenValidityUnits:\n          AccessToken: hours\n          RefreshToken: hours\n        AccessTokenValidity: 3\n        RefreshTokenValidity: 168 # 7 days\n    WaiterAppTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: WaiterAppTable\n        BillingMode: PAY_PER_REQUEST\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        AttributeDefinitions:\n          - AttributeName: PK\n            AttributeType: S\n          - AttributeName: SK\n            AttributeType: S\n          - AttributeName: GSI1PK\n            AttributeType: S\n          - AttributeName: GSI1SK\n            AttributeType: S\n        KeySchema:\n          - AttributeName: PK\n            KeyType: HASH\n          - AttributeName: SK\n            KeyType: RANGE\n        GlobalSecondaryIndexes:\n          - IndexName: GSI1PK-GSI1SK-index\n            KeySchema:\n              - AttributeName: GSI1PK\n                KeyType: HASH\n              - AttributeName: GSI1SK\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\nfunctions:\n  signUp:\n    handler: src/server/functions/auth/signUp.handler\n    events:\n      - httpApi:\n          method: POST\n          path: /auth/sign-up\n  accountConfirmation:\n    handler: src/server/functions/auth/accountConfirmation.handler\n    events:\n      - httpApi:\n          method: POST\n          path: /auth/account-confirmation\n  signIn:\n    handler: src/server/functions/auth/signIn.handler\n    events:\n      - httpApi:\n          method: POST\n          path: /auth/sign-in\n  refreshToken:\n    handler: src/server/functions/auth/refreshToken.handler\n    events:\n      - httpApi:\n          method: POST\n          path: /auth/refresh-token\n  forgotPassword:\n    handler: src/server/functions/auth/forgotPassword.handler\n    events:\n      - httpApi:\n          method: POST\n          path: /auth/forgot-password\n  resetPassword:\n    handler: src/server/functions/auth/resetPassword.handler\n    events:\n      - httpApi:\n          method: POST\n          path: /auth/reset-password\n\n",
		"command": ["deploy"],
		"options": {},
		"error": null,
		"params": {},
		"machineId": "d4b306d838edc4f825be19816a074249",
		"stage": "dev",
		"accessKeyV2": "<REDACTED>",
		"accessKeyV1": "<REDACTED>",
		"orgId": "9c677599-0d0b-441e-819a-fdadb1002467",
		"orgName": "pedrohdionisio",
		"userId": "3G0ypNML7SWwxnZXtl",
		"dashboard": {
			"isEnabledForService": false,
			"requiredAuthentication": false,
			"orgFeaturesInUse": null,
			"orgObservabilityIntegrations": null,
			"serviceAppId": null,
			"serviceProvider": null,
			"instanceParameters": null
		},
		"userName": "pedrohdionisio",
		"subscription": null,
		"userEmail": "pedrohenriquedionisioalves@gmail.com",
		"serviceProviderAwsRegion": "us-east-1",
		"serviceProviderAwsCredentials": "<REDACTED>",
		"serviceProviderAwsAccountId": "356975246949",
		"projectType": "traditional",
		"versionSf": "4.4.4",
		"serviceProviderAwsCfStackName": "waiterapp-dev",
		"integrations": {},
		"serviceUniqueId": "arn:aws:cloudformation:us-east-1:356975246949:stack/waiterapp-dev/b54ebdd0-843e-11ef-92b9-0affca4126ff",
		"serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:356975246949:stack/waiterapp-dev/b54ebdd0-843e-11ef-92b9-0affca4126ff",
		"serviceProviderAwsCfStackCreated": "2024-10-06T23:57:13.763Z",
		"serviceProviderAwsCfStackUpdated": "2024-10-09T11:53:44.762Z",
		"serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
		"serviceProviderAwsCfStackOutputs": [
			{
				"OutputKey": "AccountConfirmationLambdaFunctionQualifiedArn",
				"OutputValue": "arn:aws:lambda:us-east-1:356975246949:function:waiterapp-dev-accountConfirmation:7",
				"Description": "Current Lambda function version",
				"ExportName": "sls-waiterapp-dev-AccountConfirmationLambdaFunctionQualifiedArn"
			},
			{
				"OutputKey": "SignInLambdaFunctionQualifiedArn",
				"OutputValue": "arn:aws:lambda:us-east-1:356975246949:function:waiterapp-dev-signIn:14",
				"Description": "Current Lambda function version",
				"ExportName": "sls-waiterapp-dev-SignInLambdaFunctionQualifiedArn"
			},
			{
				"OutputKey": "ResetPasswordLambdaFunctionQualifiedArn",
				"OutputValue": "arn:aws:lambda:us-east-1:356975246949:function:waiterapp-dev-resetPassword:4",
				"Description": "Current Lambda function version",
				"ExportName": "sls-waiterapp-dev-ResetPasswordLambdaFunctionQualifiedArn"
			},
			{
				"OutputKey": "RefreshTokenLambdaFunctionQualifiedArn",
				"OutputValue": "arn:aws:lambda:us-east-1:356975246949:function:waiterapp-dev-refreshToken:5",
				"Description": "Current Lambda function version",
				"ExportName": "sls-waiterapp-dev-RefreshTokenLambdaFunctionQualifiedArn"
			},
			{
				"OutputKey": "ForgotPasswordLambdaFunctionQualifiedArn",
				"OutputValue": "arn:aws:lambda:us-east-1:356975246949:function:waiterapp-dev-forgotPassword:4",
				"Description": "Current Lambda function version",
				"ExportName": "sls-waiterapp-dev-ForgotPasswordLambdaFunctionQualifiedArn"
			},
			{
				"OutputKey": "SignUpLambdaFunctionQualifiedArn",
				"OutputValue": "arn:aws:lambda:us-east-1:356975246949:function:waiterapp-dev-signUp:14",
				"Description": "Current Lambda function version",
				"ExportName": "sls-waiterapp-dev-SignUpLambdaFunctionQualifiedArn"
			},
			{
				"OutputKey": "HttpApiId",
				"OutputValue": "f53yynkx4e",
				"Description": "Id of the HTTP API",
				"ExportName": "sls-waiterapp-dev-HttpApiId"
			},
			{
				"OutputKey": "ServerlessDeploymentBucketName",
				"OutputValue": "serverless-framework-deployments-us-east-1-ea7edc91-8062",
				"ExportName": "sls-waiterapp-dev-ServerlessDeploymentBucketName"
			},
			{
				"OutputKey": "HttpApiUrl",
				"OutputValue": "https://f53yynkx4e.execute-api.us-east-1.amazonaws.com",
				"Description": "URL of the HTTP API",
				"ExportName": "sls-waiterapp-dev-HttpApiUrl"
			}
		]
	}
}
