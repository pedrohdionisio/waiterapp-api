service: waiterapp
frameworkVersion: "4"

package:
  individually: true

provider:
  name: aws
  region: us-east-1
  runtime: nodejs20.x
  deploymentMethod: direct
  architecture: arm64
  environment:
    COGNITO_CLIENT_ID: !Ref WaiterAppUserPoolClient
    COGNITO_USER_POOL_ID: !Ref WaiterAppUserPool
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:Query
          Resource:
            - !Sub "${WaiterAppTable.Arn}"
            - !Sub "${WaiterAppTable.Arn}/index/*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminGetUser
          Resource:
            - !GetAtt WaiterAppUserPool.Arn
  httpApi:
    authorizers:
      CognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !GetAtt WaiterAppUserPool.ProviderURL
        audience:
          - !Ref WaiterAppUserPoolClient
custom:
  bundle: true
  minify: true
  sourcemap: false
  target: node20
  esbuild:
    exclude:
      - "@aws-sdk/*"
  define:
    require.resolve: undefined
  platform: node
  concurrency: 10

resources:
  Resources:
    WaiterAppUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: WaiterAppUserPool
        MfaConfiguration: OFF
        AutoVerifiedAttributes:
          - email
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        UsernameAttributes:
          - email
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: "verified_email"
              Priority: 1
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
            TemporaryPasswordValidityDays: 7
        Schema:
          - Name: name
            Mutable: true
            Required: true
            AttributeDataType: String
          - Name: role
            Mutable: true
            Required: false
            AttributeDataType: String
    WaiterAppUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: WaiterAppUserPoolClient
        UserPoolId: !Ref WaiterAppUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        TokenValidityUnits:
          AccessToken: hours
          RefreshToken: hours
        AccessTokenValidity: 3
        RefreshTokenValidity: 168 # 7 days
    WaiterAppTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: WaiterAppTable
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1PK-GSI1SK-index
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
functions:
  ## AUTH
  accountConfirmation:
    handler: src/server/functions/auth/accountConfirmation.handler
    events:
      - httpApi:
          method: POST
          path: /auth/account-confirmation
          authorizer:
            name: CognitoAuthorizer
  signIn:
    handler: src/server/functions/auth/signIn.handler
    events:
      - httpApi:
          method: POST
          path: /auth/sign-in
  refreshToken:
    handler: src/server/functions/auth/refreshToken.handler
    events:
      - httpApi:
          method: POST
          path: /auth/refresh-token
  forgotPassword:
    handler: src/server/functions/auth/forgotPassword.handler
    events:
      - httpApi:
          method: POST
          path: /auth/forgot-password
  resetPassword:
    handler: src/server/functions/auth/resetPassword.handler
    events:
      - httpApi:
          method: POST
          path: /auth/reset-password

  ## USERS
  createUser:
    handler: src/server/functions/users/createUser.handler
    events:
      - httpApi:
          method: POST
          path: /users
          authorizer:
            name: CognitoAuthorizer
  deleteUser:
    handler: src/server/functions/users/deleteUser.handler
    events:
      - httpApi:
          method: DELETE
          path: /users
          authorizer:
            name: CognitoAuthorizer
  listUsers:
    handler: src/server/functions/users/listUsers.handler
    events:
      - httpApi:
          method: GET
          path: /users
          authorizer:
            name: CognitoAuthorizer
  me:
    handler: src/server/functions/users/me.handler
    events:
      - httpApi:
          method: GET
          path: /users/me
          authorizer:
            name: CognitoAuthorizer
  updateUser:
    handler: src/server/functions/users/updateUser.handler
    events:
      - httpApi:
          method: PUT
          path: /users/{userId}
          authorizer:
            name: CognitoAuthorizer

  ## INGREDIENTS
  createIngredient:
    handler: src/server/functions/ingredients/createIngredient.handler
    events:
      - httpApi:
          method: POST
          path: /ingredients
          authorizer:
            name: CognitoAuthorizer
  listIngredients:
    handler: src/server/functions/ingredients/listIngredients.handler
    events:
      - httpApi:
          method: GET
          path: /ingredients
          authorizer:
            name: CognitoAuthorizer

